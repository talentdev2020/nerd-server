/*
ðŸ‘‹ Hi! This file was autogenerated by tslint-to-eslint-config.
https://github.com/typescript-eslint/tslint-to-eslint-config

It represents the closest reasonable ESLint configuration to this
project's original TSLint configuration.

We recommend eventually switching this configuration to extend from
the recommended rulesets in typescript-eslint. 
https://github.com/typescript-eslint/tslint-to-eslint-config/blob/master/docs/FAQs.md

Happy linting! ðŸ’–
*/
module.exports = {
    "env": {
        "browser": true,
        "es6": true
    },
    "parser": "@typescript-eslint/parser",
    overrides: [
        {
          files: ['*.ts', '*.tsx'], // Your TypeScript files extension
    
          // As mentioned in the comments, you should extend TypeScript plugins here,
          // instead of extending them outside the `overrides`.
          // If you don't want to extend any rules, you don't need an `extends` attribute.
          extends: [
            // 'plugin:@typescript-eslint/recommended',
            // 'plugin:@typescript-eslint/recommended-requiring-type-checking',
          ],
    
          parserOptions: {
            project: ['./tsconfig.json'], // Specify it only for TypeScript files
          },
        },
    ],
    "plugins": [
        "eslint-plugin-import",
        "@typescript-eslint"
    ],
    "root": true,
    "rules": {
        "@typescript-eslint/adjacent-overload-signatures": "error",
        "@typescript-eslint/no-empty-function": "error",
        "@typescript-eslint/no-empty-interface": "warn",
        "@typescript-eslint/no-floating-promises": "off",
        "@typescript-eslint/no-namespace": "error",
        "@typescript-eslint/no-shadow": [
            "warn",
            {
                "hoist": "all"
            }
        ],
        "@typescript-eslint/no-unnecessary-type-assertion": "error",
        "@typescript-eslint/prefer-for-of": "warn",
        "@typescript-eslint/triple-slash-reference": "error",
        "@typescript-eslint/unified-signatures": "warn",
        "comma-dangle": ["warn", "always-multiline"],
        // "constructor-super": "error",
        // "eqeqeq": [
        //     "warn",
        //     "always"
        // ],
        // "import/no-deprecated": "warn",
        // "import/no-extraneous-dependencies": "error",
        // "import/no-unassigned-import": "warn",
        // "no-cond-assign": "error",
        // "no-duplicate-case": "error",
        // "no-duplicate-imports": "error",
        // "no-empty": [
        //     "error",
        //     {
        //         "allowEmptyCatch": true
        //     }
        // ],
        // "no-empty-function": "error",
        // "no-invalid-this": "error",
        // "no-new-wrappers": "error",
        // "no-param-reassign": "error",
        // "no-redeclare": "error",
        // "no-sequences": "error",
        // "no-shadow": "error",
        "no-throw-literal": "error",
        // "no-unsafe-finally": "error",
        // "no-unused-labels": "error",
        // "no-var": "warn",
        // "no-void": "error",
        // "prefer-const": "warn"
    }
};
