type ImpersonationToken {
  token: String!
}

type ApiKeyResource {
  resource: String
  error: String
}

type AdminToAddress {
  address: String
  knownAddress: String
}

type AdminTransaction {
  id: String!
  status: String!
  confirmations: Int!
  timestamp: Date!
  fee: String!
  link: String!
  to: [AdminToAddress!]!
  from: String!
  amount: String!
  type: String!
  total: String!
}

type AdminWallet {
  symbol: String!
  name: String!
  balance: Balance!
  icon: String!
  backgroundColor: String!
  receiveAddress: String!
  transactions: [AdminTransaction!]!
  contractAddress: String
  canSendFunds: Boolean!
}

type UserPlainWalletHealth {
  userId:String!
  email:String!
  ethAddress:Boolean!
  btcAddress:Boolean!
  ethBlockNumAtCreation:Boolean!
  btcToken:Boolean!
  btcPrivateKey:Boolean!
  ethPrivateKey:Boolean!
  mnemonic:Boolean!
}

type Query {
  getImpersonationToken(userId: String!): ImpersonationToken!

  getApiKeyServiceResource(
    userId: String!
    coin: String!
    resourceKey: String!
  ): ApiKeyResource!

  getWalletByUserId(userId: String!, coinSymbol: String): [AdminWallet]!

  getUserIdByEmail(email:String!): String

  getBrokenWallets:[UserPlainWalletHealth!]!
}
