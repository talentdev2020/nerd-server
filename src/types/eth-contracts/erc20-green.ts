// /* Generated by ts-generator ver. 0.0.8 */
// /* tslint:disable */

// import { Contract, ContractTransaction, EventFilter, Signer } from 'ethers';
// import { Listener, Provider } from 'ethers/providers';
// import { Arrayish, BigNumber, BigNumberish, Interface } from 'ethers/utils';
// import {
//   TransactionOverrides,
//   TypedEventDescription,
//   TypedFunctionDescription,
// } from '.';

// interface Erc20Interface extends Interface {
//   functions: {
//     addMinter: TypedFunctionDescription<{
//       encode([account]: [string]): string;
//     }>;

//     allowance: TypedFunctionDescription<{
//       encode([owner, spender]: [string, string]): string;
//     }>;

//     approve: TypedFunctionDescription<{
//       encode([spender, amount]: [string, BigNumberish]): string;
//     }>;

//     balanceOf: TypedFunctionDescription<{
//       encode([account]: [string]): string;
//     }>;

//     burn: TypedFunctionDescription<{
//       encode([amount]: [BigNumberish]): string;
//     }>;

//     burnFrom: TypedFunctionDescription<{
//       encode([account, amount]: [string, BigNumberish]): string;
//     }>;

//     cap: TypedFunctionDescription<{ encode([]: []): string }>;

//     decimals: TypedFunctionDescription<{ encode([]: []): string }>;

//     decreaseAllowance: TypedFunctionDescription<{
//       encode([spender, subtractedValue]: [string, BigNumberish]): string;
//     }>;

//     increaseAllowance: TypedFunctionDescription<{
//       encode([spender, addedValue]: [string, BigNumberish]): string;
//     }>;

//     isMinter: TypedFunctionDescription<{ encode([account]: [string]): string }>;

//     mintBulk: TypedFunctionDescription<{
//       encode([accounts, amounts]: [string[], BigNumberish[]]): string;
//     }>;

//     name: TypedFunctionDescription<{ encode([]: []): string }>;

//     owner: TypedFunctionDescription<{ encode([]: []): string }>;

//     removeMinter: TypedFunctionDescription<{
//       encode([account]: [string]): string;
//     }>;

//     renounceMinter: TypedFunctionDescription<{ encode([]: []): string }>;

//     symbol: TypedFunctionDescription<{ encode([]: []): string }>;

//     totalSupply: TypedFunctionDescription<{ encode([]: []): string }>;

//     transfer: TypedFunctionDescription<{
//       encode([recipient, amount]: [string, BigNumberish]): string;
//     }>;

//     transferFrom: TypedFunctionDescription<{
//       encode([sender, recipient, amount]: [
//         string,
//         string,
//         BigNumberish,
//       ]): string;
//     }>;
//   };

//   events: {
//     Approval: TypedEventDescription<{
//       encodeTopics([owner, spender, value]: [
//         string | null,
//         string | null,
//         null,
//       ]): string[];
//     }>;

//     MinterAdded: TypedEventDescription<{
//       encodeTopics([account]: [string | null]): string[];
//     }>;

//     MinterRemoved: TypedEventDescription<{
//       encodeTopics([account]: [string | null]): string[];
//     }>;

//     Transfer: TypedEventDescription<{
//       encodeTopics([from, to, value]: [
//         string | null,
//         string | null,
//         null,
//       ]): string[];
//     }>;
//   };
// }

// export class Erc20 extends Contract {
//   connect(signerOrProvider: Signer | Provider | string): Erc20;
//   attach(addressOrName: string): Erc20;
//   deployed(): Promise<Erc20>;

//   on(event: EventFilter | string, listener: Listener): Erc20;
//   once(event: EventFilter | string, listener: Listener): Erc20;
//   addListener(eventName: EventFilter | string, listener: Listener): Erc20;
//   removeAllListeners(eventName: EventFilter | string): Erc20;
//   removeListener(eventName: any, listener: Listener): Erc20;

//   interface: Erc20Interface;

//   functions: {
//     addMinter(
//       account: string,
//       overrides?: TransactionOverrides,
//     ): Promise<ContractTransaction>;

//     allowance(owner: string, spender: string): Promise<BigNumber>;

//     approve(
//       spender: string,
//       amount: BigNumberish,
//       overrides?: TransactionOverrides,
//     ): Promise<ContractTransaction>;

//     balanceOf(account: string): Promise<BigNumber>;

//     burn(
//       amount: BigNumberish,
//       overrides?: TransactionOverrides,
//     ): Promise<ContractTransaction>;

//     burnFrom(
//       account: string,
//       amount: BigNumberish,
//       overrides?: TransactionOverrides,
//     ): Promise<ContractTransaction>;

//     cap(): Promise<BigNumber>;

//     decimals(): Promise<number>;

//     decreaseAllowance(
//       spender: string,
//       subtractedValue: BigNumberish,
//       overrides?: TransactionOverrides,
//     ): Promise<ContractTransaction>;

//     increaseAllowance(
//       spender: string,
//       addedValue: BigNumberish,
//       overrides?: TransactionOverrides,
//     ): Promise<ContractTransaction>;

//     isMinter(account: string): Promise<boolean>;

//     mintBulk(
//       accounts: string[],
//       amounts: BigNumberish[],
//       overrides?: TransactionOverrides,
//     ): Promise<ContractTransaction>;

//     name(): Promise<string>;

//     owner(): Promise<string>;

//     removeMinter(
//       account: string,
//       overrides?: TransactionOverrides,
//     ): Promise<ContractTransaction>;

//     renounceMinter(
//       overrides?: TransactionOverrides,
//     ): Promise<ContractTransaction>;

//     symbol(): Promise<string>;

//     totalSupply(): Promise<BigNumber>;

//     transfer(
//       recipient: string,
//       amount: BigNumberish,
//       overrides?: TransactionOverrides,
//     ): Promise<ContractTransaction>;

//     transferFrom(
//       sender: string,
//       recipient: string,
//       amount: BigNumberish,
//       overrides?: TransactionOverrides,
//     ): Promise<ContractTransaction>;
//   };

//   addMinter(
//     account: string,
//     overrides?: TransactionOverrides,
//   ): Promise<ContractTransaction>;

//   allowance(owner: string, spender: string): Promise<BigNumber>;

//   approve(
//     spender: string,
//     amount: BigNumberish,
//     overrides?: TransactionOverrides,
//   ): Promise<ContractTransaction>;

//   balanceOf(account: string): Promise<BigNumber>;

//   burn(
//     amount: BigNumberish,
//     overrides?: TransactionOverrides,
//   ): Promise<ContractTransaction>;

//   burnFrom(
//     account: string,
//     amount: BigNumberish,
//     overrides?: TransactionOverrides,
//   ): Promise<ContractTransaction>;

//   cap(): Promise<BigNumber>;

//   decimals(): Promise<number>;

//   decreaseAllowance(
//     spender: string,
//     subtractedValue: BigNumberish,
//     overrides?: TransactionOverrides,
//   ): Promise<ContractTransaction>;

//   increaseAllowance(
//     spender: string,
//     addedValue: BigNumberish,
//     overrides?: TransactionOverrides,
//   ): Promise<ContractTransaction>;

//   isMinter(account: string): Promise<boolean>;

//   mintBulk(
//     accounts: string[],
//     amounts: BigNumberish[],
//     overrides?: TransactionOverrides,
//   ): Promise<ContractTransaction>;

//   name(): Promise<string>;

//   owner(): Promise<string>;

//   removeMinter(
//     account: string,
//     overrides?: TransactionOverrides,
//   ): Promise<ContractTransaction>;

//   renounceMinter(
//     overrides?: TransactionOverrides,
//   ): Promise<ContractTransaction>;

//   symbol(): Promise<string>;

//   totalSupply(): Promise<BigNumber>;

//   transfer(
//     recipient: string,
//     amount: BigNumberish,
//     overrides?: TransactionOverrides,
//   ): Promise<ContractTransaction>;

//   transferFrom(
//     sender: string,
//     recipient: string,
//     amount: BigNumberish,
//     overrides?: TransactionOverrides,
//   ): Promise<ContractTransaction>;

//   filters: {
//     Approval(
//       owner: string | null,
//       spender: string | null,
//       value: null,
//     ): EventFilter;

//     MinterAdded(account: string | null): EventFilter;

//     MinterRemoved(account: string | null): EventFilter;

//     Transfer(from: string | null, to: string | null, value: null): EventFilter;
//   };

//   estimate: {
//     addMinter(account: string): Promise<BigNumber>;

//     allowance(owner: string, spender: string): Promise<BigNumber>;

//     approve(spender: string, amount: BigNumberish): Promise<BigNumber>;

//     balanceOf(account: string): Promise<BigNumber>;

//     burn(amount: BigNumberish): Promise<BigNumber>;

//     burnFrom(account: string, amount: BigNumberish): Promise<BigNumber>;

//     cap(): Promise<BigNumber>;

//     decimals(): Promise<BigNumber>;

//     decreaseAllowance(
//       spender: string,
//       subtractedValue: BigNumberish,
//     ): Promise<BigNumber>;

//     increaseAllowance(
//       spender: string,
//       addedValue: BigNumberish,
//     ): Promise<BigNumber>;

//     isMinter(account: string): Promise<BigNumber>;

//     mintBulk(accounts: string[], amounts: BigNumberish[]): Promise<BigNumber>;

//     name(): Promise<BigNumber>;

//     owner(): Promise<BigNumber>;

//     removeMinter(account: string): Promise<BigNumber>;

//     renounceMinter(): Promise<BigNumber>;

//     symbol(): Promise<BigNumber>;

//     totalSupply(): Promise<BigNumber>;

//     transfer(recipient: string, amount: BigNumberish): Promise<BigNumber>;

//     transferFrom(
//       sender: string,
//       recipient: string,
//       amount: BigNumberish,
//     ): Promise<BigNumber>;
//   };
// }
